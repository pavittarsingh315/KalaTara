IMPORTANT TASKS:
   1. DO NOT PUT THIS OFF. Convert the application to hex-arch: https://www.youtube.com/watch?v=MpFog2kZsHk

TODOS:
   1. Consider changing the id field on the models to UUID rather than string representation of UUID
   2. Think about incorporating this package into the application: https://github.com/gammazero/workerpool

GOOD IDEAS:
   1. Caching User and Profile as one object in Redis:
      a. In both login routes, when the user and profile is fetched from the database, cache the profile object in Redis.
      b. In the auth middleware, first try to get the profile obj from Redis. If it doesn't exist, query the DB and put it in cache.
      c. Websocket connection will remove profile obj from cache when user disconnects. However you should add a expiration time anyways.
      d. When a user updates their profile model via the API, in that route, update the profile object in Redis.
      e. When a user is deleted, delete them from Redis.

   2. Websockets:
      a. Establish a websocket connection with the user. Do this when they first load the app or webpage.
      b. When they disconnect, remove their user/profile object from Redis cache.
      c. Listen to mysql binary logs to stream events from mysql and get real-time data updates. We can use this to send notifications.

   3. Notifications:
      a. Create an AfterCreate hook on the Notification model.
      b. In the hook, check whether the user who will get the notification is in Redis. If they are that means they're online.
      c. If the user who will get the notification is offline, have Firebase Cloud Messaging send a notification.
      d. If the user who will get the notification is online, then send the notification obj to the user across the Websocket connection.
      e. To see how to pass arguments to hooks, see InstanceGet/InstanceSet here: https://gorm.io/docs/settings.html. You can pass the Websocket connection to the hook and use it to send the obj.